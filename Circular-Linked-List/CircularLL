/**
* created by VIKAS SINGH
* on 22 JAN 2016
* Simple implementation of Circular LL
* Code here is poorly written but it can do the job of simple learning and practise
* Just Remember whenever you insert a node, make sure node at end points to head of CLL
* Node CLASS implementation is NOT SHOWN HERE.
*/

class Test4 {
	Node head=null;
	
	public Test4() {
	}
	
	public Test4(int a) {
		head = new Node(a);
		head.next = head;
	}

	public void insert(int a) {
		if(head == null) {
			head = new Node(a);
			head.next = head;
		}

		else {
			Node temp;
			temp = head;
			while(temp.next != head) {
				temp = temp.next;
			}
			Node temp2 = new Node(a);
			temp.next = temp2;
			temp2.next = head;
		}
	}
	
	public void print() {
		Node temp = head;
		if(temp == null)
			return;  // empty Circular LL
		do{
			System.out.print(temp.val + "->");
			temp = temp.next;
		} while(temp != head);
		System.out.println("");
	}	
		
	public static void main(String args[]) {
		Test4 obj = new Test4(1);
		obj.insert(2);
		obj.insert(3);
		obj.insert(4);
		obj.insert(5);
		obj.print();
		
		Test4 obj2 = new Test4();
		obj2.insert(1);
		obj2.insert(2);
		obj2.insert(3);
		obj2.insert(4);
		obj2.print();
	}
}
