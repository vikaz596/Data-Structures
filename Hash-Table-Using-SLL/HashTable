import java.util.Scanner;

/**
* created by VIKAS SINGH
* on 21 JAN 2016
*/

class SLLNode {
	int data;
	SLLNode next;
	
	public SLLNode(int data) {
		this.data = data;
		next = null;
	}	
}

public class HashMap {
	private SLLNode table[];
	private int size;
	
	public HashMap(int tableSize) {
		table = new SLLNode[nextPrime(tableSize)];
		this.size = 0;
	}
	
	public boolean isEmpty() {
		if(size==0)
			return true;
		else
			return false;
	}
	
	public void clear() {
		int len = table.length;
		table = new SLLNode[len];
		size = 0;
	}
	
	public int getSize() {
		return size;
	}
	
	public void insert(int val) {
		size++;
		int pos = myHash(val);
		SLLNode temp = new SLLNode(val);
		if(table[pos]==null)
			table[pos] = temp;
		
		else {
			temp.next = table[pos];
			table[pos] = temp; 
		}			
	}
	
	public void remove(int val) {
		int pos = myHash(val);
		SLLNode start = table[pos];
		if(start==null) {
			System.out.println("Element not found");
			return;
		}
		
		if(start.data == val) {  // if element at beg of the list
			size--;
			table[pos] = start.next;
			return;
		}
		
		SLLNode prev = start;
		SLLNode end = start.next;
		while(end.next != null) {
			if(end.data == val) {
				size--;
				prev.next = end.next;
				return;
			}
			prev = end;
			end = end.next;
		}
		System.out.println("Element not found");
		return;	
	}
	
	private int myHash(Integer val) {
		int hashVal = val.hashCode();
		hashVal = hashVal%table.length;
		if(hashVal<0)
			hashVal = hashVal + table.length;
		
		return hashVal;
	}
	
	private static int nextPrime(int n) {
		if(n%2==0)
			n++;
		
		for( ; !isPrime(n) ; n+=2);
		
		return n;
	}
	
	private static boolean isPrime(int n) {
		if(n==2 || n==3)
			return true;
		
		if(n==1 || n%2==0)
			return false;
		
		for(int i=3 ; i*i<=n ; i+=2)
			if(n%i==0)
				return false;
			
		return true;	
	}
	
	public void printHashTable() {
		System.out.println("");
		for(int i=0 ; i<table.length ; i++) {
			SLLNode start = table[i];
			while(start!=null) {
				System.out.print(start.data + " ");
				start = start.next;
			}
			System.out.println("");
		}	
	}
	
	public static void main(String args[]) {
		Scanner stdin = new Scanner(System.in);
		System.out.println("HashTable Test");
		System.out.println("Enter size");
		int x = stdin.nextInt();
		HashMap hm = new HashMap(x);
		
		char ch;
		
		do {
			System.out.println("Hash Table Operations");
			System.out.println("1 . Insert");
			System.out.println("2 . Remove");
			System.out.println("3 . Clear");
			System.out.println("4 . Size");
			System.out.println("5 . Check Empty");
			
			int choice = stdin.nextInt();
			switch(choice) {
				case 1 :  System.out.println("Enter element to insert");
						  x = stdin.nextInt();
						  hm.insert(x);
						  break;
						  
				case 2 :  System.out.println("Enter element to remove");
						  x = stdin.nextInt();
						  hm.remove(x);
						  break;

				case 3 :  hm.clear();
						  System.out.println("HT Cleared");
						  break;
						  
				case 4 :  System.out.println("Size : " + hm.getSize());
						  break;	

				case 5 :  System.out.println("Is Empty : " + hm.isEmpty());
						  break;
						  
				default : System.out.println("Wrong Entry");
						  break;
			}
			
			hm.printHashTable();
			System.out.println("Do you want to continue : y | n");
			ch = stdin.next().charAt(0);
		} while(ch=='y' || ch=='Y');
	}
}
