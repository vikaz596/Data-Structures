import java.util.Scanner;

/**
* created by VIKAS SINGH
* on 23 JAN 2016
* Basic implementaion of Binary Tree using Recursive methods
*/

class Node {
	int data;
	Node left;
	Node right;
	
	public Node(int data) {
		this.data = data;
		left = null;
		right = null;
	}
}

public class BinaryTree {
	Node root;
	
	public BinaryTree(int data) {
		root = new Node(data);
	}
	
	public void insert(int data) {
		root = insert(root,data);	
	}
	
	private Node insert(Node temp, int data) {
		if(temp == null) {
			temp = new Node(data);
			return temp;
		}

		if(temp.left == null) 
			temp.left = insert(temp.left,data);
		
		else
			temp.right = insert(temp.right,data);
		
		return temp;		
	}
	
	public void inOrder() {
		inOrder(root);
	}
	
	private void inOrder(Node temp) {
		if(temp!=null) {
			inOrder(temp.left);
			System.out.print(temp.data + " ");
			inOrder(temp.right);
		}
	}
	
	public boolean search(int data) {
		return search(root,data);
	}
	
	public int countNodes() {
		return countNodes(root);
	}
	
	private int countNodes(Node temp) {
		if(temp == null)
			return 0;
		
		int c=1;
		c = c + countNodes(temp.left);
		c = c + countNodes(temp.right);
		
		return c;
	}
	
	private boolean search(Node temp, int data) {
		if(temp.data == data)
			return true;
		
		if(temp.left != null) {
			if(search(temp.left,data)) {
				return true;
			}	
		}
		
		if(temp.right != null) {
			if(search(temp.right,data))
				return true;
		}
		
		return false;
	}
	
	public static void main(String args[]) {
		Scanner stdin = new Scanner(System.in);
		
		System.out.println("Enter a number with which u want to start your Binary Tree");
		int n = stdin.nextInt();
        /* Creating object of BT */
        BinaryTree bt = new BinaryTree(n); 
        /*  Perform tree operations  */
        System.out.println("Binary Tree Test\n");          
        char ch;        
        do    
        {
            System.out.println("\nBinary Tree Operations\n");
            System.out.println("1. insert ");
            System.out.println("2. search");
			System.out.println("2. count Nodes");
 
            int choice = stdin.nextInt();            
            switch (choice) {
				case 1 : 
					System.out.println("Enter integer element to insert");
					bt.insert( stdin.nextInt() );                     
					break;                          
				case 2 : 
					System.out.println("Enter integer element to search");
					System.out.println("Search result : "+ bt.search( stdin.nextInt() ));
					break;                                          
				case 3 : 
					System.out.println("Nodes = "+ bt.countNodes());
					break;             
				default : 
					System.out.println("Wrong Entry \n ");
					break;   
            }
			
            /*  Display tree  */ 
            System.out.print("\nIn order : ");
            bt.inOrder();
 
            System.out.println("\n\nDo you want to continue (Type y or n) \n");
            ch = stdin.next().charAt(0);                        
        } while (ch == 'Y'|| ch == 'y');
		
		stdin.close();
	}
}
